/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Oracle, OracleInterface } from "../../contracts/Oracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes21",
        name: "_roflAppID",
        type: "bytes21",
      },
      {
        internalType: "uint8",
        name: "_threshold",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "RoflOriginNotAuthorizedForApp",
    type: "error",
  },
  {
    inputs: [],
    name: "SubcallError",
    type: "error",
  },
  {
    inputs: [],
    name: "getLastObservation",
    outputs: [
      {
        internalType: "uint128",
        name: "_value",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "_block",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roflAppID",
    outputs: [
      {
        internalType: "bytes21",
        name: "",
        type: "bytes21",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_value",
        type: "uint128",
      },
    ],
    name: "submitObservation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "threshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060c0016040528062092cd562ffffff168152602001620930bd62ffffff168152602001620934a662ffffff1681526020016209389062ffffff168152602001620934a662ffffff168152602001620930bd62ffffff16815250600490600662000073929190620001eb565b506040518060a0016040528061eac461ffff16815260200161eb2861ffff16815260200161eb8c61ffff16815260200161eb8c61ffff16815260200161eb2861ffff168152506005906005620000cb929190620002b9565b5060006006556000600755348015620000e357600080fd5b506040516200124438038062001244833981810160405281019062000109919062000445565b60008160ff161162000152576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014990620004ed565b60405180910390fd5b81600060016101000a81548174ffffffffffffffffffffffffffffffffffffffffff021916908360581c0217905550806000806101000a81548160ff021916908360ff1602179055506000600260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600060026001018190555050506200050f565b82805482825590600052602060002090600101600290048101928215620002a65791602002820160005b838211156200026657835183826101000a8154816fffffffffffffffffffffffffffffffff021916908362ffffff1602179055509260200192601001602081600f0104928301926001030262000215565b8015620002a45782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f0104928301926001030262000266565b505b509050620002b5919062000386565b5090565b82805482825590600052602060002090600101600290048101928215620003735791602002820160005b838211156200033357835183826101000a8154816fffffffffffffffffffffffffffffffff021916908361ffff1602179055509260200192601001602081600f01049283019260010302620002e3565b8015620003715782816101000a8154906fffffffffffffffffffffffffffffffff0219169055601001602081600f0104928301926001030262000333565b505b50905062000382919062000386565b5090565b5b80821115620003a157600081600090555060010162000387565b5090565b600080fd5b60007fffffffffffffffffffffffffffffffffffffffffff000000000000000000000082169050919050565b620003e181620003aa565b8114620003ed57600080fd5b50565b6000815190506200040181620003d6565b92915050565b600060ff82169050919050565b6200041f8162000407565b81146200042b57600080fd5b50565b6000815190506200043f8162000414565b92915050565b600080604083850312156200045f576200045e620003a5565b5b60006200046f85828601620003f0565b925050602062000482858286016200042e565b9150509250929050565b600082825260208201905092915050565b7f496e76616c6964207468726573686f6c64000000000000000000000000000000600082015250565b6000620004d56011836200048c565b9150620004e2826200049d565b602082019050919050565b600060208201905081810360008301526200050881620004c6565b9050919050565b610d25806200051f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806342cde4e814610051578063dae1ee1f1461006f578063efae93df1461008b578063f29f4110146100a9575b600080fd5b6100596100c8565b60405161006691906105fe565b60405180910390f35b61008960048036038101906100849190610675565b6100d9565b005b6100936102f4565b6040516100a091906106dd565b60405180910390f35b6100b1610307565b6040516100bf929190610720565b60405180910390f35b60008054906101000a900460ff1681565b6100f1600060019054906101000a900460581b61038d565b600060046006548154811061010957610108610749565b5b90600052602060002090600291828204019190066010029054906101000a90046fffffffffffffffffffffffffffffffff169050600480549050600160065461015291906107a7565b61015c919061080a565b60068190555060018190806001815401808255809150506001900390600052602060002090600291828204019190066010029091909190916101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008054906101000a900460ff1660ff1660018054905010156101eb57506102f1565b6000805b60018054905081101561027457600181815481106102105761020f610749565b5b90600052602060002090600291828204019190066010029054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168261025f91906107a7565b9150808061026c9061083b565b9150506101ef565b506001805490506fffffffffffffffffffffffffffffffff16816102989190610883565b905080600260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555043600260010181905550600160006102ee919061059d565b50505b50565b600060019054906101000a900460581b81565b60008043600a60026001015461031d91906107a7565b1161035d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035490610911565b60405180910390fd5b600260000160009054906101000a90046fffffffffffffffffffffffffffffffff16915060026001015490509091565b6000806103ee6040518060400160405280601781526020017f726f666c2e4973417574686f72697a65644f726967696e000000000000000000815250846040516020016103da91906109a9565b604051602081830303815290604052610499565b9150915060008267ffffffffffffffff1614158061040e57506001815114155b8061045d575060f560f81b8160008151811061042d5761042c610749565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15610494576040517f6890282f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000606060008073010000000000000000000000000000000000010373ffffffffffffffffffffffffffffffffffffffff1686866040516020016104de929190610aa3565b6040516020818303038152906040526040516104fa9190610b16565b6000604051808303816000865af19150503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b509150915081610578576040517f902e94f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080602001905181019061058c9190610c93565b809450819550505050509250929050565b5080546000825560010160029004906000526020600020908101906105c291906105c5565b50565b5b808211156105de5760008160009055506001016105c6565b5090565b600060ff82169050919050565b6105f8816105e2565b82525050565b600060208201905061061360008301846105ef565b92915050565b6000604051905090565b600080fd5b600080fd5b60006fffffffffffffffffffffffffffffffff82169050919050565b6106528161062d565b811461065d57600080fd5b50565b60008135905061066f81610649565b92915050565b60006020828403121561068b5761068a610623565b5b600061069984828501610660565b91505092915050565b60007fffffffffffffffffffffffffffffffffffffffffff000000000000000000000082169050919050565b6106d7816106a2565b82525050565b60006020820190506106f260008301846106ce565b92915050565b6107018161062d565b82525050565b6000819050919050565b61071a81610707565b82525050565b600060408201905061073560008301856106f8565b6107426020830184610711565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107b282610707565b91506107bd83610707565b92508282019050808211156107d5576107d4610778565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061081582610707565b915061082083610707565b9250826108305761082f6107db565b5b828206905092915050565b600061084682610707565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361087857610877610778565b5b600182019050919050565b600061088e82610707565b915061089983610707565b9250826108a9576108a86107db565b5b828204905092915050565b600082825260208201905092915050565b7f4e6f206f62736572766174696f6e20617661696c61626c650000000000000000600082015250565b60006108fb6018836108b4565b9150610906826108c5565b602082019050919050565b6000602082019050818103600083015261092a816108ee565b9050919050565b600081905092915050565b7f5500000000000000000000000000000000000000000000000000000000000000600082015250565b6000610972600183610931565b915061097d8261093c565b600182019050919050565b6000819050919050565b6109a361099e826106a2565b610988565b82525050565b60006109b482610965565b91506109c08284610992565b60158201915081905092915050565b600081519050919050565b60005b838110156109f85780820151818401526020810190506109dd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a20826109cf565b610a2a81856108b4565b9350610a3a8185602086016109da565b610a4381610a04565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000610a7582610a4e565b610a7f8185610a59565b9350610a8f8185602086016109da565b610a9881610a04565b840191505092915050565b60006040820190508181036000830152610abd8185610a15565b90508181036020830152610ad18184610a6a565b90509392505050565b600081905092915050565b6000610af082610a4e565b610afa8185610ada565b9350610b0a8185602086016109da565b80840191505092915050565b6000610b228284610ae5565b915081905092915050565b600067ffffffffffffffff82169050919050565b610b4a81610b2d565b8114610b5557600080fd5b50565b600081519050610b6781610b41565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610baf82610a04565b810181811067ffffffffffffffff82111715610bce57610bcd610b77565b5b80604052505050565b6000610be1610619565b9050610bed8282610ba6565b919050565b600067ffffffffffffffff821115610c0d57610c0c610b77565b5b610c1682610a04565b9050602081019050919050565b6000610c36610c3184610bf2565b610bd7565b905082815260208101848484011115610c5257610c51610b72565b5b610c5d8482856109da565b509392505050565b600082601f830112610c7a57610c79610b6d565b5b8151610c8a848260208601610c23565b91505092915050565b60008060408385031215610caa57610ca9610623565b5b6000610cb885828601610b58565b925050602083015167ffffffffffffffff811115610cd957610cd8610628565b5b610ce585828601610c65565b915050925092905056fea2646970667358221220aa8cd4ec2d0ed10f196c4b4f35ee5d672bbe4bf98f702fa08ccfe1b7c84f0a1164736f6c63430008130033";

type OracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Oracle__factory extends ContractFactory {
  constructor(...args: OracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _roflAppID: BytesLike,
    _threshold: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_roflAppID, _threshold, overrides || {});
  }
  override deploy(
    _roflAppID: BytesLike,
    _threshold: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_roflAppID, _threshold, overrides || {}) as Promise<
      Oracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Oracle__factory {
    return super.connect(runner) as Oracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleInterface {
    return new Interface(_abi) as OracleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Oracle {
    return new Contract(address, _abi, runner) as unknown as Oracle;
  }
}
